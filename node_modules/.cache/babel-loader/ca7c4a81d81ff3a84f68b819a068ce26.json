{"ast":null,"code":"var _jsxFileName = \"/Users/austenleow/Desktop/travel-app-main/src/components/cognito-api/Account.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext } from \"react\";\nimport { AuthenticationDetails, CognitoUser, Cgnito } from \"amazon-cognito-identity-js\";\nimport Pool from \"./UserPool\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccountContext = /*#__PURE__*/createContext();\n\nconst Account = props => {\n  _s();\n\n  const getSession = async () => {\n    return await new Promise((resolve, reject) => {\n      const user = Pool.getCurrentUser();\n\n      if (user) {\n        user.getSession((err, session) => {\n          if (err) {\n            reject();\n          } else {\n            resolve(session);\n          }\n        });\n      } else {\n        reject();\n      }\n    });\n  };\n\n  const confirmCode = (user, Username, Password) => {\n    const code = prompt(\"Please enter ur verification code\");\n    user.confirmRegistration(code);\n    authenticate(Username, Password);\n  };\n\n  const authenticate = async (Username, Password) => {\n    return await new Promise((resolve, reject) => {\n      const user = new CognitoUser({\n        Username,\n        Pool\n      });\n      const authDetails = new AuthenticationDetails({\n        Username,\n        Password\n      });\n      user.authenticateUser(authDetails, {\n        onSuccess: data => {\n          console.log(\"onSuccess: \", data); // resolve(data.getIdToken().getJwtToken());   // jwt id token is here\n\n          const tokens = {\n            accessToken: data.getAccessToken().getJwtToken(),\n            idToken: data.getIdToken().getJwtToken(),\n            refreshToken: data.getRefreshToken().getToken()\n          };\n          user['tokens'] = tokens;\n          console.log(user);\n          setToken(data.getIdToken().getJwtToken());\n          resolve(user);\n        },\n        onFailure: err => {\n          if (err.toString().includes(\"UserNotConfirmedException\")) {\n            confirmCode(user, Username, Password);\n          }\n\n          console.log(\"onFailure: \", err);\n          reject(err);\n        },\n        newPasswordRequired: data => {\n          console.log(\"newPasswordRequired: \", data);\n          resolve(data);\n        }\n      });\n    });\n  };\n\n  const signUp = async (email, password) => {\n    return await new Promise((resolve, reject) => {\n      Pool.signUp(email, password, [], null, (err, data) => {\n        if (err) {\n          console.log(err);\n        }\n\n        console.log(data);\n      }, {\n        onSuccess: data => {\n          console.log(\"onSuccess: \", data);\n          alert(\"Success! Go and login now!\");\n          setToken(data.getIdToken().getJwtToken());\n          resolve(data);\n        },\n        onFailure: err => {\n          console.error(\"onFailure: \", err);\n          reject(err);\n        }\n      });\n    });\n  };\n\n  const logout = () => {\n    const user = Pool.getCurrentUser();\n\n    if (user) {\n      user.signOut();\n    }\n\n    setToken(null);\n  };\n\n  let initialToken;\n\n  if (authenticate) {\n    initialToken = authenticate;\n  } // if (signUp) {\n  //   initialToken = signUp;\n  // }\n\n\n  const [token, setToken] = useState(initialToken);\n  const isLoggedIn = !!token; // console.log(token);\n\n  return /*#__PURE__*/_jsxDEV(AccountContext.Provider, {\n    value: {\n      authenticate,\n      getSession,\n      signUp,\n      logout,\n      isLoggedIn\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Account, \"s3jk56xWU5XKZXYqw5SfcwTuysU=\");\n\n_c = Account;\nexport { Account, AccountContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"names":["React","useState","createContext","AuthenticationDetails","CognitoUser","Cgnito","Pool","AccountContext","Account","props","getSession","Promise","resolve","reject","user","getCurrentUser","err","session","confirmCode","Username","Password","code","prompt","confirmRegistration","authenticate","authDetails","authenticateUser","onSuccess","data","console","log","tokens","accessToken","getAccessToken","getJwtToken","idToken","getIdToken","refreshToken","getRefreshToken","getToken","setToken","onFailure","toString","includes","newPasswordRequired","signUp","email","password","alert","error","logout","signOut","initialToken","token","isLoggedIn","children"],"sources":["/Users/austenleow/Desktop/travel-app-main/src/components/cognito-api/Account.js"],"sourcesContent":["import React, { useState, createContext} from \"react\";\nimport { AuthenticationDetails, CognitoUser, Cgnito } from \"amazon-cognito-identity-js\";\nimport Pool from \"./UserPool\";\n\n\nconst AccountContext = createContext();\n\nconst Account = (props) => {\n\n  const getSession = async () => {\n    return await new Promise((resolve, reject) => {\n      const user = Pool.getCurrentUser();\n      if (user){\n        user.getSession((err, session) => {\n          if (err){\n            reject();\n          }\n          else {\n            resolve(session)\n          }\n        });\n      }\n      else {\n        reject();\n      }}) \n  }\n\n  const confirmCode = (user, Username, Password) => {\n    const code = prompt(\"Please enter ur verification code\")\n    user.confirmRegistration(code)\n    authenticate(Username, Password)\n  }\n\n  const authenticate = async (Username, Password) => {\n    return await new Promise ((resolve, reject) => {\n      const user = new CognitoUser({\n        Username,\n        Pool\n      })\n  \n      const authDetails = new AuthenticationDetails({\n        Username,\n        Password,\n      })\n  \n      user.authenticateUser(authDetails, {\n        onSuccess: (data) => {\n          console.log(\"onSuccess: \", data)\n          // resolve(data.getIdToken().getJwtToken());   // jwt id token is here\n          const tokens = {\n            accessToken: data.getAccessToken().getJwtToken(),\n            idToken: data.getIdToken().getJwtToken(),\n            refreshToken: data.getRefreshToken().getToken()\n          };\n          user['tokens'] = tokens;\n          console.log(user);\n          setToken(data.getIdToken().getJwtToken());\n          resolve(user);\n        },\n        onFailure: (err) => {\n          if (err.toString().includes(\"UserNotConfirmedException\") ){\n            confirmCode(user, Username, Password)\n          }\n          console.log(\"onFailure: \", err)\n          reject(err)\n        },\n        newPasswordRequired: (data) => {\n          console.log(\"newPasswordRequired: \", data)\n          resolve(data)\n        }\n      })\n    })\n  }\n  \n  const signUp = async (email, password) => {\n    return await new Promise ((resolve, reject) => {\n      Pool.signUp(email, password, [], null, (err, data) => {\n     \n        if (err) {\n          console.log(err)\n        }\n        console.log(data)\n      }, {\n        onSuccess: (data) => {\n          console.log(\"onSuccess: \", data)\n          alert(\"Success! Go and login now!\");\n          setToken(data.getIdToken().getJwtToken());\n          resolve(data);\n        },\n        onFailure: (err) => {\n          console.error(\"onFailure: \", err)\n          reject(err)\n        },\n      })\n    })  \n  };\n\n  const logout = () => {\n    const user = Pool.getCurrentUser();\n    if (user) {\n      user.signOut();\n    }\n    setToken(null);\n  }\n\n  let initialToken;\n  if (authenticate) {\n    initialToken = authenticate;\n  } \n  // if (signUp) {\n  //   initialToken = signUp;\n  // }\n  const [token, setToken] = useState(initialToken);\n  const isLoggedIn = !!token;\n  // console.log(token);\n\n  return (\n    <AccountContext.Provider value={{authenticate, getSession, signUp, logout, isLoggedIn}}>\n      {props.children}\n    </AccountContext.Provider>\n  )\n\n};\n\nexport {Account, AccountContext};"],"mappings":"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"},"metadata":{},"sourceType":"module"}